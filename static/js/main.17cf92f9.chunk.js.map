{"version":3,"sources":["components/App/logo.svg","serviceWorker.js","components/GlobalStyle.styled.js","components/App/App.styled.js","components/App/App.js","components/RestaurantsList/RestaurantsList.styled.js","utils/fixHalf.js","components/RestaurantsList/RestaurantsList.js","components/RestaurantsMap/RestaurantsMap.styled.js","components/RestaurantsMap/RestaurantsMap.js","containers/App/App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","GlobalStyle","createGlobalStyle","Root","styled","div","AppLogo","img","attrs","src","logo","alt","Header","header","Body","main","SectionLeft","section","SectionRightWrapper","SlideContent","SectionRight","React","forwardRef","ref","children","displayName","propTypes","PropTypes","oneOfType","string","arrayOf","node","isRequired","App","leftSide","rightSide","List","ul","Item","li","CardBody","ButtonReviews","button","type","Image","Card","onClick","imageSrc","func","defaultProps","fixHalf","value","dec","Number","Math","floor","factor","RestaurantList","this","props","restaurants","onClickRestaurant","onClickRestaurantRate","map","restaurant","id","restaurantName","position","rating","showRatingsButton","rates","length","key","lat","lng","title","initialRating","isHalfRating","size","handleOnClick","selectedRating","Object","assign","newRate","comment","className","renderRestaurants","Component","MapContainer","GettingCurrentPosition","RestaurantsMap","updateCurrentPositionMarker","google","maps","Animation","Marker","navigator","geolocation","setState","gettingCurrentPosition","getCurrentPosition","coords","latitude","longitude","onMapLoaded","setTimeout","animation","DROP","addListener","setCenter","getPosition","updateRestaurantMarkers","restaurantMarkers","Point","Size","InfoWindow","filter","p","Array","from","keys","includes","forEach","iPlace","icon","image","url","origin","anchor","scaledSize","marker","contentString","infoWindow","content","values","r","close","open","set","mapRef","createRef","Map","state","event","GoogleMap","current","center","zoom","evt","addPlace","onAddPlace","latLng","prevProps","selectedRestaurant","updateRestaurants","updateSelectedRestaurant","prevState","snapshot","console","log","trigger","get","gettingCurrentPositionIndicator","renderGettingCurrentPositionIndicator","handleMapLoaded","request","LatLng","radius","places","PlacesService","nearbySearch","place","name","address","vicinity","geometry","handleClickRestaurant","showReviews","handleClickRestaurantRate","handleFormReviewSubmit","e","idx","findIndex","preventDefault","push","ratesLength","reduce","acc","splice","toString","unshift","setMap","rateComponent","restaurantNameInput","placeholder","style","minWidth","onChange","target","onSubmit","minHeight","rateList","rate","isReadOnly","restaurantList","renderFormReviews","renderReviews","renderMap","list","renderList","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.17cf92f9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.7e873e41.svg\";","/* eslint-disable no-console */\n/* eslint-disable no-param-reassign */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated pre-cached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been pre-cached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n      sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n}`;\n\nexport default GlobalStyle;\n","import React from 'react';\n\nimport styled from 'styled-components';\n\nimport PropTypes from 'prop-types';\n\nimport logo from './logo.svg';\n\nconst Root = styled.div`\n  text-align: center;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  font-size: calc(8px + 2vmin);\n  color: white;\n`;\n\nconst AppLogo = styled.img.attrs({\n  src: logo,\n  alt: 'logo'\n})`\n  height: 48px;\n  pointer-events: none;\n\n  @keyframes App-logo-spin {\n    from {\n      transform: rotate(0deg);\n    }\n    to {\n      transform: rotate(360deg);\n    }\n  }\n\n  @media (prefers-reduced-motion: no-preference) {\n    & {\n      animation: App-logo-spin infinite 4s linear;\n    }\n  }\n`;\n\nconst Header = styled.header`\n  width: 100%;\n  background: #00b4db; /* fallback for old browsers */\n  background: linear-gradient(to right, #00b4db, #0083b0);\n  height: calc(15vh - 10px);\n  padding-top: 10px;\n  p {\n    margin: 5px 0px;\n  }\n`;\n\nconst Body = styled.main`\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  box-sizing: border-box;\n`;\n\nconst SectionLeft = styled.section`\n  background-color: orange;\n  width: 80%;\n  height: 85vh;\n  overflow-x: hidden;\n  position: relative;\n`;\n\nconst SectionRightWrapper = styled.section`\n  background: #3c3b3f; /* fallback for old browsers */\n  background: linear-gradient(to right, #605c3c, #3c3b3f);\n  width: 20%;\n  min-width: 300px;\n  height: 85vh;\n  overflow-x: hidden;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst SlideContent = styled.div`\n  display: flex;\n  flex-flow: row nowrap;\n  width: 100%;\n  height: 100%;\n  overflow-x: hidden;\n  overflow-y: auto;\n  > * {\n    transition: all 0.4s cubic-bezier(0.215, 0.61, 0.355, 1);\n    visibility: hidden;\n    opacity: 0;\n    width: 0;\n\n    &.selected {\n      visibility: visible;\n      opacity: 1;\n      width: 100%;\n      margin-left: 0px;\n      overflow-y: inherit;\n    }\n\n    &:first-child:not(.selected) {\n      width: 100%;\n      margin-left: -100%;\n      opacity: 0;\n      overflow-y: hidden;\n    }\n  }\n`;\n\nconst SectionRight = React.forwardRef(({ children }, ref) => (\n  <SectionRightWrapper>\n    <SlideContent ref={ref}>{children}</SlideContent>\n  </SectionRightWrapper>\n));\n\nSectionRight.displayName = 'SectionRight';\n\nSectionRight.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node\n  ]).isRequired\n};\n\nexport default { Root, AppLogo, Header, Body, SectionLeft, SectionRight };\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport s from './App.styled';\n\nfunction App({ leftSide, rightSide }) {\n  return (\n    <s.Root>\n      <s.Header>\n        <s.AppLogo />\n        <p>Restaurant review.</p>\n      </s.Header>\n      <s.Body>\n        <s.SectionLeft>{leftSide}</s.SectionLeft>\n        <s.SectionRight>{rightSide}</s.SectionRight>\n      </s.Body>\n    </s.Root>\n  );\n}\n\nApp.propTypes = {\n  leftSide: PropTypes.node.isRequired,\n  rightSide: PropTypes.node.isRequired\n};\n\nexport default App;\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport styled from 'styled-components';\n\nconst List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  margin: 0;\n  padding: 15px 0 0 0;\n  overflow-x: hidden;\n  overflow-y: auto;\n`;\n\nconst Item = styled.li`\n  list-style: none;\n  width: 100%;\n  margin: 0 0 10px 0;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  padding: 5px;\n`;\n\nconst CardBody = styled.div`\n  background-color: #fff;\n  border-radius: 4px;\n  box-shadow: 0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 2px 2px 0 rgba(0, 0, 0, 0.14),\n    0 1px 5px 0 rgba(0, 0, 0, 0.12);\n  color: rgba(0, 0, 0, 0.87);\n  overflow: hidden;\n  border: none;\n  font: inherit;\n  width: 250px;\n  min-height: 50px;\n\n  padding: 5px;\n\n  &::after {\n    clear: both;\n  }\n  &::after,\n  &::before {\n    content: '';\n    display: block;\n  }\n\n  &:focus {\n    background-color: gray;\n  }\n\n  &:hover {\n    background-color: lightgray;\n  }\n`;\n\nconst ButtonReviews = styled.button.attrs({ type: 'button' })`\n  background-color: #0074d9;\n  border-radius: 4px;\n  box-shadow: 0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 2px 2px 0 rgba(0, 0, 0, 0.14),\n    0 1px 5px 0 rgba(0, 0, 0, 0.12);\n  color: white;\n  font-weight: bold;\n  overflow: hidden;\n  border: none;\n  padding: 7px;\n\n  &::after {\n    clear: both;\n  }\n  &::after,\n  &::before {\n    content: '';\n    display: block;\n  }\n\n  &:focus {\n    background-color: #7fdbff;\n  }\n\n  &:hover {\n    background-color: #7fdbff;\n    cursor: pointer;\n  }\n`;\n\nconst Image = styled.img`\n  border: 1px solid gray;\n  border-top-left-radius: 5px;\n  border-top-right-radius: 5px;\n  width: calc(100% - 5px);\n  height: 150px;\n`;\n\nconst Card = React.forwardRef(({ onClick, children, imageSrc }, ref) => (\n  <Item>\n    <CardBody onClick={onClick} ref={ref}>\n      <Image src={imageSrc} />\n      {children}\n    </CardBody>\n  </Item>\n));\n\nCard.displayName = 'RestaurantsListCard';\n\nCard.propTypes = {\n  onClick: PropTypes.func,\n  children: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node\n  ]).isRequired,\n  imageSrc: PropTypes.string.isRequired\n};\n\nCard.defaultProps = {\n  onClick: () => {}\n};\n\nexport default {\n  List,\n  Card,\n  ButtonReviews\n};\n","const fixHalf = value => {\n  if (!value) {\n    return 0;\n  }\n\n  const dec = Number(value - Math.floor(value));\n  let factor = Number(dec < 0.5 && dec > 0 ? 0.5 : 0);\n  factor = Number(factor === 0 && dec > 0.5 ? 1 : 0.5);\n\n  return Math.floor(value) + factor;\n};\n\nexport default fixHalf;\n","import React, { Component } from 'react';\n\nimport PropTypes from 'prop-types';\nimport StarRating from 'react-svg-star-rating';\n\nimport s from './RestaurantsList.styled';\n\nimport fixHalf from '../../utils/fixHalf';\n\nexport default class RestaurantList extends Component {\n  renderRestaurants() {\n    const { restaurants, onClickRestaurant, onClickRestaurantRate } = this.props;\n    return restaurants.map(restaurant => {\n      const { id, restaurantName, position, rating } = restaurant;\n      const showRatingsButton = restaurant.rates.length ? (\n        <s.ButtonReviews\n          onClick={() => {\n            onClickRestaurant(restaurant);\n          }}\n        >\n          View Reviews {restaurant.rates.length}\n        </s.ButtonReviews>\n      ) : null;\n\n      return (\n        <s.Card\n          key={id}\n          imageSrc={`https://maps.googleapis.com/maps/api/streetview?size=300x300&location=${position.lat},${position.lng}&fov=80&heading=70&pitch=0&key=AIzaSyBwYHIy3nSGNk4Tm-HfoXQpOHbGEyA-RmA`}\n        >\n          <span title={rating || ''}>\n            <StarRating\n              initialRating={fixHalf(Number(rating))}\n              isHalfRating\n              size={20}\n              handleOnClick={selectedRating => {\n                const modifiedRestaurant = Object.assign(restaurant);\n                modifiedRestaurant.newRate = {\n                  comment: '',\n                  rating: selectedRating\n                };\n                onClickRestaurantRate(restaurant);\n              }}\n            />\n          </span>\n          {showRatingsButton}\n          <div>{restaurantName}</div>\n        </s.Card>\n      );\n    });\n  }\n\n  render() {\n    const { className } = this.props;\n    const restaurants = this.renderRestaurants();\n    return <s.List className={className}>{restaurants}</s.List>;\n  }\n}\n\nRestaurantList.propTypes = {\n  restaurants: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      restaurantName: PropTypes.string.isRequired\n    })\n  ).isRequired,\n  onClickRestaurant: PropTypes.func.isRequired,\n  onClickRestaurantRate: PropTypes.func.isRequired,\n  className: PropTypes.string.isRequired\n};\n","import styled from 'styled-components';\n\nconst MapContainer = styled.div`\n  height: 100%;\n`;\n\nconst GettingCurrentPosition = styled.div`\n  color: gray;\n  position: absolute;\n  top: 15px;\n  left: 50%;\n  transform: translateX(-50%);\n  z-index: 2000;\n`;\n\nexport default {\n  MapContainer,\n  GettingCurrentPosition\n};\n","import React, { Component } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport s from './RestaurantsMap.styled';\n\nexport default class RestaurantsMap extends Component {\n  constructor(props) {\n    super(props);\n    this.mapRef = React.createRef();\n    this.map = null;\n    this.restaurantMarkers = new Map();\n    this.state = {\n      gettingCurrentPosition: false\n    };\n  }\n\n  componentDidMount() {\n    const {\n      google: {\n        maps: { event, Map: GoogleMap }\n      }\n    } = window;\n\n    this.map = new GoogleMap(this.mapRef.current, {\n      center: { lat: 20.6995456, lng: -103.35027199999999 },\n      zoom: 13\n    });\n\n    event.addListener(this.map, 'click', evt => {\n      this.addPlace(evt);\n    });\n\n    this.updateCurrentPositionMarker();\n    this.updateRestaurantMarkers();\n  }\n\n  // eslint-disable-next-line react/sort-comp\n  addPlace(event) {\n    const { onAddPlace } = this.props;\n    const {\n      google: {\n        maps: { Marker }\n      }\n    } = window;\n    const marker = new Marker({\n      position: event.latLng,\n      map: this.map\n    });\n    onAddPlace(marker);\n  }\n\n  getSnapshotBeforeUpdate(prevProps) {\n    const { restaurants, selectedRestaurant } = this.props;\n\n    if (prevProps.restaurants !== restaurants) {\n      return { updateRestaurants: true };\n    }\n\n    if (prevProps.selectedRestaurant !== selectedRestaurant && selectedRestaurant.id > 0) {\n      return { updateSelectedRestaurant: true };\n    }\n\n    return null;\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    // eslint-disable-next-line no-console\n    console.log('trying updating');\n    if (snapshot && snapshot.updateRestaurants) {\n      // eslint-disable-next-line no-console\n      console.log('updating');\n      this.updateRestaurantMarkers();\n    }\n\n    if (snapshot && snapshot.updateSelectedRestaurant) {\n      const { selectedRestaurant } = this.props;\n      const {\n        google: {\n          maps: {\n            event: { trigger }\n          }\n        }\n      } = window;\n\n      if (selectedRestaurant) {\n        trigger(this.restaurantMarkers.get(selectedRestaurant.id).marker, 'click');\n      } else {\n        const { restaurantMarkers } = this;\n        Array.from(restaurantMarkers.values()).forEach(({ infoWindow: iw }) => iw.close());\n      }\n    }\n  }\n\n  updateCurrentPositionMarker = () => {\n    const { map } = this;\n    const {\n      google: {\n        maps: { Animation, Marker }\n      }\n    } = window;\n\n    if (navigator.geolocation) {\n      this.setState({ gettingCurrentPosition: true });\n      navigator.geolocation.getCurrentPosition(({ coords: { latitude: lat, longitude: lng } }) => {\n        const position = {\n          lat,\n          lng\n        };\n        const { onMapLoaded } = this.props;\n\n        onMapLoaded(map, position);\n        setTimeout(() => {\n          this.setState({ gettingCurrentPosition: false });\n          const currentPositionMarker = new Marker({\n            map,\n            position,\n            animation: Animation.DROP,\n            title: 'Your position'\n          });\n          currentPositionMarker.addListener('click', function currentPositionMarkerClick() {\n            map.setCenter(this.getPosition());\n          });\n        }, 400);\n\n        map.setCenter(position);\n      });\n    }\n  };\n\n  updateRestaurantMarkers = () => {\n    const {\n      map,\n      restaurantMarkers,\n      props: { restaurants }\n    } = this;\n    const {\n      google: {\n        maps: { Point, Size, Marker, Animation, InfoWindow }\n      }\n    } = window;\n\n    restaurants\n      .filter(p => !Array.from(restaurantMarkers.keys()).includes(p.id))\n      .forEach((restaurant, iPlace) => {\n        const { id, icon, restaurantName, position } = restaurant;\n\n        const image = {\n          url: icon,\n          size: new Size(64, 64),\n          origin: new Point(0, 0),\n          anchor: new Point(17, 34),\n          scaledSize: new Size(25, 25)\n        };\n\n        setTimeout(() => {\n          const marker = new Marker({\n            map,\n            position,\n            icon: image,\n            title: restaurantName,\n            animation: Animation.DROP\n          });\n          const contentString = `<img\n              src=\"https://maps.googleapis.com/maps/api/streetview?size=400x400&location=${position.lat},${position.lng}&fov=80&heading=70&pitch=0&key=AIzaSyBwYHIy3nSGNk4Tm-HfoXQpOHbGEyA-RmA\"\n              alt=\"\"\n            />\n          `;\n\n          const infoWindow = new InfoWindow({\n            content: contentString\n          });\n\n          marker.addListener('click', function restaurantMarkerClick() {\n            this.map.setCenter(this.getPosition());\n            Array.from(restaurantMarkers.values())\n              .filter(r => r.id !== id)\n              .forEach(({ infoWindow: iw }) => iw.close());\n            setTimeout(() => {\n              infoWindow.open(this.map, marker);\n            }, 100);\n          });\n\n          restaurantMarkers.set(id, { ...restaurant, marker, infoWindow });\n        }, 600 + 20 * iPlace);\n      });\n  };\n\n  renderGettingCurrentPositionIndicator() {\n    const { gettingCurrentPosition } = this.state;\n    if (gettingCurrentPosition) {\n      return (\n        <s.GettingCurrentPosition>\n          Getting current location from your device&nbsp;...\n        </s.GettingCurrentPosition>\n      );\n    }\n\n    return null;\n  }\n\n  render() {\n    const gettingCurrentPositionIndicator = this.renderGettingCurrentPositionIndicator();\n    return (\n      <>\n        {gettingCurrentPositionIndicator}\n        <s.MapContainer ref={this.mapRef} />\n      </>\n    );\n  }\n}\n\nconst restaurantShape = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  restaurantName: PropTypes.string.isRequired,\n  position: PropTypes.shape({\n    lat: PropTypes.number.isRequired,\n    lng: PropTypes.number.isRequired\n  }).isRequired\n});\n\nRestaurantsMap.propTypes = {\n  restaurants: PropTypes.arrayOf(restaurantShape).isRequired,\n  selectedRestaurant: restaurantShape,\n  onMapLoaded: PropTypes.func.isRequired,\n  onAddPlace: PropTypes.func.isRequired\n};\n\nRestaurantsMap.defaultProps = {\n  selectedRestaurant: null\n};\n","import React, { Component } from 'react';\n\nimport StarRating from 'react-svg-star-rating';\n\nimport AppComponent from '../../components/App';\nimport RestaurantsList from '../../components/RestaurantsList';\nimport RestaurantsMap from '../../components/RestaurantsMap';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      restaurants: [],\n      selectedRestaurant: null,\n      showReviews: false\n    };\n  }\n\n  handleMapLoaded = (map, { lat, lng }) => {\n    const request = {\n      location: new window.google.maps.LatLng(lat, lng),\n      radius: '3000',\n      type: ['restaurant']\n    };\n\n    const service = new window.google.maps.places.PlacesService(map);\n    // eslint-disable-next-line no-console\n    service.nearbySearch(request, places => {\n      this.setState({\n        restaurants: places.map(place => {\n          const {\n            id,\n            icon,\n            name: restaurantName,\n            vicinity: address,\n            geometry: { location }\n            // rating,\n            // user_ratings_total: userRatingsTotal\n          } = place;\n\n          return {\n            id,\n            icon,\n            restaurantName,\n            address,\n            position: {\n              lat: location.lat(),\n              lng: location.lng()\n            },\n            rating: 0,\n            rates: []\n          };\n        })\n      });\n    });\n  };\n\n  handleClickRestaurant = selectedRestaurant => {\n    this.setState({ selectedRestaurant, showReviews: true });\n  };\n\n  handleClickRestaurantRate = selectedRestaurant => {\n    this.setState({ selectedRestaurant });\n  };\n\n  handleFormReviewSubmit = e => {\n    const { restaurants, selectedRestaurant } = this.state;\n    const idx = restaurants.findIndex(r => r.id === selectedRestaurant.id);\n\n    e.preventDefault();\n    selectedRestaurant.rates.push({ ...selectedRestaurant.newRate });\n    delete selectedRestaurant.newRate;\n    const ratesLength = selectedRestaurant.rates.length;\n    selectedRestaurant.rating =\n      selectedRestaurant.rates.reduce((acc, r) => acc + r.rating, 0) / ratesLength;\n\n    if (idx !== -1) {\n      selectedRestaurant.id = `${selectedRestaurant.id}.1`;\n      restaurants.splice(idx, 1, selectedRestaurant);\n    } else {\n      selectedRestaurant.id = (restaurants.length + 1).toString();\n      restaurants.unshift(selectedRestaurant);\n\n      // eslint-disable-next-line no-unused-expressions\n      selectedRestaurant.marker && selectedRestaurant.marker.setMap(null);\n    }\n\n    this.setState({ restaurants: [...restaurants], selectedRestaurant: null });\n  };\n\n  renderMap() {\n    const { restaurants, selectedRestaurant } = this.state;\n    return (\n      <RestaurantsMap\n        restaurants={restaurants}\n        selectedRestaurant={selectedRestaurant}\n        onMapLoaded={this.handleMapLoaded}\n        onAddPlace={marker => {\n          const { position } = marker;\n          this.setState({\n            selectedRestaurant: {\n              id: '0',\n              icon: 'https://maps.gstatic.com/mapfiles/place_api/icons/restaurant-71.png',\n              restaurantName: '',\n              address: '',\n              position: {\n                lat: position.lat(),\n                lng: position.lng()\n              },\n              rating: 0,\n              rates: [],\n              newRate: {\n                comment: '',\n                rating: 0\n              },\n              marker\n            }\n          });\n        }}\n      />\n    );\n  }\n\n  renderFormReviews() {\n    const { selectedRestaurant, showReviews } = this.state;\n    const rateComponent =\n      selectedRestaurant && !showReviews ? (\n        <StarRating\n          initialRating={selectedRestaurant.newRate.rating}\n          isHalfRating\n          size={20}\n          handleOnClick={rating => {\n            selectedRestaurant.newRate.rating = rating;\n            this.setState({ selectedRestaurant });\n          }}\n        />\n      ) : null;\n\n    const restaurantNameInput =\n      selectedRestaurant && selectedRestaurant.id === '0' ? (\n        <input\n          name=\"restaurantName\"\n          placeholder=\"Write the restaurant name\"\n          style={{ minWidth: 'calc(100% - 40px)' }}\n          onChange={e => {\n            selectedRestaurant.restaurantName = e.target.value;\n            this.setState({ selectedRestaurant });\n          }}\n          value={selectedRestaurant ? selectedRestaurant.restaurantName : ''}\n        />\n      ) : null;\n    return (\n      <form\n        className={selectedRestaurant && !showReviews ? 'selected' : ''}\n        onSubmit={this.handleFormReviewSubmit}\n      >\n        {restaurantNameInput}\n        {rateComponent}\n        <textarea\n          name=\"comment\"\n          style={{ minWidth: 'calc(100% - 40px)', minHeight: '150px' }}\n          placeholder=\"Write your review\"\n          onChange={e => {\n            selectedRestaurant.newRate.comment = e.target.value;\n            this.setState({ selectedRestaurant });\n          }}\n          value={\n            selectedRestaurant && selectedRestaurant.newRate\n              ? selectedRestaurant.newRate.comment\n              : ''\n          }\n        />\n        <button type=\"submit\">Save</button>\n      </form>\n    );\n  }\n\n  renderReviews() {\n    const { selectedRestaurant, showReviews } = this.state;\n    const rateList =\n      selectedRestaurant && showReviews\n        ? selectedRestaurant.rates.map(rate => (\n            <div key={`${rate.comment}_${rate.rating}`}>\n              <div>{rate.comment}</div>\n              <StarRating initialRating={rate.rating} isReadOnly isHalfRating />\n              <hr />\n            </div>\n          ))\n        : null;\n\n    return (\n      <div className={selectedRestaurant && showReviews ? 'selected' : ''}>\n        {rateList}\n        <button\n          type=\"button\"\n          onClick={() => {\n            this.setState({ selectedRestaurant: null, showReviews: false });\n          }}\n        >\n          Back\n        </button>\n      </div>\n    );\n  }\n\n  renderList() {\n    const { restaurants, selectedRestaurant } = this.state;\n    const restaurantList = (\n      <RestaurantsList\n        className={selectedRestaurant ? '' : 'selected'}\n        restaurants={restaurants}\n        onClickRestaurant={this.handleClickRestaurant}\n        onClickRestaurantRate={this.handleClickRestaurantRate}\n      />\n    );\n\n    return (\n      <>\n        {restaurantList}\n        {this.renderFormReviews()}\n        {this.renderReviews()}\n      </>\n    );\n  }\n\n  render() {\n    const map = this.renderMap();\n    const list = this.renderList();\n    return <AppComponent leftSide={map} rightSide={list} />;\n  }\n}\n","import React from 'react';\n\nimport ReactDOM from 'react-dom';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport GlobalStyle from './components/GlobalStyle.styled';\nimport App from './containers/App';\n\nReactDOM.render(\n  <>\n    <GlobalStyle />\n    <App />\n  </>,\n  document.getElementById('app-render')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls. More documentation.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}