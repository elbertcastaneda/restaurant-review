{"version":3,"sources":["components/App/logo.svg","serviceWorker.js","components/GlobalStyle.styled.js","components/Components.styled.js","components/App/App.styled.js","components/App/App.js","components/RestaurantsMap/RestaurantsMap.styled.js","components/RestaurantsMap/RestaurantsMap.js","containers/App/App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","GlobalStyle","createGlobalStyle","Code","styled","code","Root","div","AppLink","a","AppLogo","img","attrs","src","logo","alt","Header","header","Body","main","SectionLeft","section","SectionRight","App","leftSide","rightSide","href","target","rel","MapContainer","RestaurantsMap","props","createMarkers","places","map","google","maps","LatLngBounds","Point","Size","Marker","Animation","bounds","forEach","place","iPlace","image","url","icon","size","origin","anchor","scaledSize","setTimeout","marker","title","name","position","geometry","animation","DROP","addListener","this","setZoom","setCenter","getPosition","restaurantMarkers","set","id","extend","fitBounds","mapRef","React","createRef","placesService","placesResultPaginator","Map","changeRestaurants","PlacesService","GoogleMap","current","center","lat","lng","zoom","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","nearbySearch","type","radius","restaurants","status","paginator","ref","Component","handleChangeRestaurants","console","log","state","renderMap","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7cc0f1be.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","/* eslint-disable no-console */\n/* eslint-disable no-param-reassign */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated pre-cached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been pre-cached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n      sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n}`;\n\nexport default GlobalStyle;\n","import styled from 'styled-components';\n\nconst Code = styled.code`\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace;\n`;\n\nexport default {\n  Code\n};\n","import styled from 'styled-components';\n\nimport logo from './logo.svg';\n\nconst Root = styled.div`\n  text-align: center;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  font-size: calc(10px + 2vmin);\n  color: white;\n`;\n\nconst AppLink = styled.a`\n  color: #61dafb;\n`;\n\nconst AppLogo = styled.img.attrs({\n  src: logo,\n  alt: 'logo'\n})`\n  height: 64px;\n  pointer-events: none;\n\n  @keyframes App-logo-spin {\n    from {\n      transform: rotate(0deg);\n    }\n    to {\n      transform: rotate(360deg);\n    }\n  }\n\n  @media (prefers-reduced-motion: no-preference) {\n    & {\n      animation: App-logo-spin infinite 20s linear;\n    }\n  }\n`;\n\nconst Header = styled.header`\n  width: 100%;\n  background-color: #282c34;\n  height: 25vh;\n`;\n\nconst Body = styled.main`\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n`;\n\nconst SectionLeft = styled.section`\n  background-color: orange;\n  width: 70%;\n  height: 75vh;\n`;\n\nconst SectionRight = styled.section`\n  background-color: fuchsia;\n  width: 30%;\n  height: 75vh;\n`;\n\nexport default { Root, AppLogo, AppLink, Header, Body, SectionLeft, SectionRight };\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport cs from '../Components.styled';\n\nimport s from './App.styled';\n\nfunction App({ leftSide, rightSide }) {\n  return (\n    <s.Root>\n      <s.Header>\n        <s.AppLogo />\n        <p>\n          Edit <cs.Code>src/App</cs.Code> and save to reload.\n        </p>\n        <s.AppLink href=\"https://reactjs.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn React\n        </s.AppLink>\n      </s.Header>\n      <s.Body>\n        <s.SectionLeft>{leftSide}</s.SectionLeft>\n        <s.SectionRight>{rightSide}</s.SectionRight>\n      </s.Body>\n    </s.Root>\n  );\n}\n\nApp.propTypes = {\n  leftSide: PropTypes.node.isRequired,\n  rightSide: PropTypes.node.isRequired\n};\n\nexport default App;\n","import styled from 'styled-components';\n\nconst MapContainer = styled.div`\n  height: 100%;\n`;\n\nexport default {\n  MapContainer\n};\n","import React, { Component } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport s from './RestaurantsMap.styled';\n\nexport default class RestaurantsMap extends Component {\n  constructor(props) {\n    super(props);\n    this.mapRef = React.createRef();\n    this.map = null;\n    this.placesService = null;\n    this.placesResultPaginator = null;\n    this.restaurantMarkers = new Map();\n  }\n\n  componentDidMount() {\n    const { changeRestaurants } = this.props;\n    const {\n      google: {\n        maps: {\n          Animation,\n          Marker,\n          places: { PlacesService },\n          Map: GoogleMap\n        }\n      }\n    } = window;\n\n    this.map = new GoogleMap(this.mapRef.current, {\n      center: { lat: 20.6995456, lng: -103.35027199999999 },\n      zoom: 12\n    });\n\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(({ coords: { latitude: lat, longitude: lng } }) => {\n        const location = {\n          lat,\n          lng\n        };\n        setTimeout(() => {\n          const myPosMarker = new Marker({\n            map: this.map,\n            position: location,\n            animation: Animation.DROP,\n            title: 'My position'\n          });\n          myPosMarker.addListener('click', function myPositionMarkerClick() {\n            this.map.setZoom(13);\n            this.map.setCenter(this.getPosition());\n          });\n        }, 400);\n\n        this.map.setCenter(location);\n\n        this.placesService = new PlacesService(this.map);\n        this.placesService.nearbySearch(\n          {\n            location,\n            type: 'restaurant',\n            radius: 9000\n          },\n          (restaurants, status, paginator) => {\n            if (status !== 'OK') return;\n            this.placesResultPaginator = paginator;\n\n            this.createMarkers(restaurants);\n            changeRestaurants(restaurants, paginator);\n          }\n        );\n      });\n    }\n  }\n\n  createMarkers = (places = []) => {\n    const { map } = this;\n    const {\n      google: {\n        maps: { LatLngBounds, Point, Size, Marker, Animation }\n      }\n    } = window;\n    const bounds = new LatLngBounds();\n\n    places.forEach((place, iPlace) => {\n      const image = {\n        url: place.icon,\n        size: new Size(64, 64),\n        origin: new Point(0, 0),\n        anchor: new Point(17, 34),\n        scaledSize: new Size(25, 25)\n      };\n\n      // eslint-disable-next-line no-unused-expressions\n      setTimeout(() => {\n        const marker = new Marker({\n          map,\n          icon: image,\n          title: place.name,\n          position: place.geometry.location,\n          animation: Animation.DROP\n        });\n        marker.addListener('click', function restaurantMarkerClick() {\n          this.map.setZoom(13);\n          this.map.setCenter(this.getPosition());\n        });\n\n        this.restaurantMarkers.set(place.id, { ...place, marker });\n      }, 600 + 20 * iPlace);\n\n      bounds.extend(place.geometry.location);\n    });\n    map.fitBounds(bounds);\n  };\n\n  render() {\n    return (\n      <>\n        <s.MapContainer ref={this.mapRef} />\n      </>\n    );\n  }\n}\n\nRestaurantsMap.propTypes = {\n  changeRestaurants: PropTypes.func.isRequired\n};\n","import React, { Component } from 'react';\n\nimport AppComponent from '../../components/App';\nimport RestaurantsMap from '../../components/RestaurantsMap';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // restaurants: []\n    };\n  }\n\n  handleChangeRestaurants = restaurants => {\n    // eslint-disable-next-line no-console\n    console.log(restaurants);\n    // this.setState({ restaurants });\n  };\n\n  renderMap() {\n    return <RestaurantsMap changeRestaurants={this.handleChangeRestaurants} />;\n  }\n\n  render() {\n    const map = this.renderMap();\n    return <AppComponent leftSide={map} rightSide={<span>Hello</span>} />;\n  }\n}\n","import React from 'react';\n\nimport ReactDOM from 'react-dom';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport GlobalStyle from './components/GlobalStyle.styled';\nimport App from './containers/App';\n\nReactDOM.render(\n  <>\n    <GlobalStyle />\n    <App />\n  </>,\n  document.getElementById('app-render')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls. More documentation.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}