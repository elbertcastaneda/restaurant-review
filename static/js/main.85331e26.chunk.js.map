{"version":3,"sources":["components/App/logo.svg","serviceWorker.js","components/Components.styled.js","components/App/App.styled.js","components/App/App.js","components/GlobalStyle.styled.js","components/Map/Map.styled.js","components/Map/Map.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Code","styled","code","Root","div","AppLink","a","AppLogo","img","attrs","src","logo","alt","Header","header","Body","main","SectionLeft","section","SectionRight","App","leftSide","rightSide","href","target","rel","GlobalStyle","createGlobalStyle","MapContainer","Map","props","mapRef","React","createRef","map","google","maps","PlacesService","places","GoogleMap","navigator","geolocation","getCurrentPosition","coords","lat","latitude","lng","longitude","current","center","zoom","nearbySearch","type","radius","restaurants","console","log","ref","this","Component","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0HAAAA,EAAOC,QAAU,IAA0B,kC,+GCcvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2D,6KCjBnC,IAIe,GACbC,KALWC,IAAOC,KAAV,M,qsCCEV,IAAMC,EAAOF,IAAOG,IAAV,KASJC,EAAUJ,IAAOK,EAAV,KAmDE,GAAEH,OAAMI,QA/CPN,IAAOO,IAAIC,MAAM,CAC/BC,IAAKC,IACLC,IAAK,QAFSX,CAAH,KA+CmBI,UAASQ,OAxB1BZ,IAAOa,OAAV,KAwBqCC,KAlBpCd,IAAOe,KAAV,KAkB6CC,YAZnChB,IAAOiB,QAAV,KAYmDC,aAN/ClB,IAAOiB,QAAV,MCzBHE,MAzBf,YAAuC,IAAxBC,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,UACvB,OACE,kBAAC,EAAEnB,KAAH,KACE,kBAAC,EAAEU,OAAH,KACE,kBAAC,EAAEN,QAAH,MACA,mCACO,kBAAC,EAAGP,KAAJ,gBADP,wBAGA,kBAAC,EAAEK,QAAH,CAAWkB,KAAK,sBAAsBC,OAAO,SAASC,IAAI,uBAA1D,gBAIF,kBAAC,EAAEV,KAAH,KACE,kBAAC,EAAEE,YAAH,KAAgBI,GAChB,kBAAC,EAAEF,aAAH,KAAiBG,M,wWCpBzB,IAUeI,EAVKC,YAAH,K,gICAjB,IAIe,GACbC,aALmB3B,IAAOG,IAAV,MCEGyB,E,YACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,OAASC,IAAMC,YACpB,EAAKC,IAAM,KAHM,E,iFAME,IAAD,SAQdtC,OANFuC,OACEC,KACYC,EAJE,EAIZC,OAAUD,cACLE,EALO,EAKZV,IAIFW,UAAUC,aACZD,UAAUC,YAAYC,oBAAmB,YAAoD,IAAD,IAAhDC,OAAoBC,EAA4B,EAAtCC,SAA0BC,EAAY,EAAvBC,UACnE,EAAKb,IAAM,IAAIK,EAAU,EAAKR,OAAOiB,QAAS,CAC5CC,OAAQ,CAAEL,MAAKE,OACfI,KAAM,IAGO,IAAIb,EAAc,EAAKH,KAC/BiB,aACL,CACEtD,SAAU,CACR+C,MACAE,OAEFM,KAAM,aACNC,OAAQ,MAEV,SAAAC,GAEEC,QAAQC,IAAIF,W,+BAQpB,OACE,oCACE,kBAAC,EAAE1B,aAAH,CAAgB6B,IAAKC,KAAK3B,c,GA7CD4B,aCMjCC,IAASC,OACP,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAKxC,SAAU,kBAAC,EAAD,MAASC,UAAW,0CAErCwC,SAASC,eAAe,ePkHpB,kBAAmBvB,WACrBA,UAAUwB,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLf,QAAQe,MAAMA,EAAMC,c","file":"static/js/main.85331e26.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","/* eslint-disable no-console */\n/* eslint-disable no-param-reassign */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated pre-cached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been pre-cached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import styled from 'styled-components';\n\nconst Code = styled.code`\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace;\n`;\n\nexport default {\n  Code\n};\n","import styled from 'styled-components';\n\nimport logo from './logo.svg';\n\nconst Root = styled.div`\n  text-align: center;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  font-size: calc(10px + 2vmin);\n  color: white;\n`;\n\nconst AppLink = styled.a`\n  color: #61dafb;\n`;\n\nconst AppLogo = styled.img.attrs({\n  src: logo,\n  alt: 'logo'\n})`\n  height: 64px;\n  pointer-events: none;\n\n  @keyframes App-logo-spin {\n    from {\n      transform: rotate(0deg);\n    }\n    to {\n      transform: rotate(360deg);\n    }\n  }\n\n  @media (prefers-reduced-motion: no-preference) {\n    & {\n      animation: App-logo-spin infinite 20s linear;\n    }\n  }\n`;\n\nconst Header = styled.header`\n  width: 100%;\n  background-color: #282c34;\n  height: 25vh;\n`;\n\nconst Body = styled.main`\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n`;\n\nconst SectionLeft = styled.section`\n  background-color: orange;\n  width: 70%;\n  height: 75vh;\n`;\n\nconst SectionRight = styled.section`\n  background-color: fuchsia;\n  width: 30%;\n  height: 75vh;\n`;\n\nexport default { Root, AppLogo, AppLink, Header, Body, SectionLeft, SectionRight };\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport cs from '../Components.styled';\n\nimport s from './App.styled';\n\nfunction App({ leftSide, rightSide }) {\n  return (\n    <s.Root>\n      <s.Header>\n        <s.AppLogo />\n        <p>\n          Edit <cs.Code>src/App</cs.Code> and save to reload.\n        </p>\n        <s.AppLink href=\"https://reactjs.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn React\n        </s.AppLink>\n      </s.Header>\n      <s.Body>\n        <s.SectionLeft>{leftSide}</s.SectionLeft>\n        <s.SectionRight>{rightSide}</s.SectionRight>\n      </s.Body>\n    </s.Root>\n  );\n}\n\nApp.propTypes = {\n  leftSide: PropTypes.node.isRequired,\n  rightSide: PropTypes.node.isRequired\n};\n\nexport default App;\n","import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n      sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n}`;\n\nexport default GlobalStyle;\n","import styled from 'styled-components';\n\nconst MapContainer = styled.div`\n  height: 100%;\n`;\n\nexport default {\n  MapContainer\n};\n","import React, { Component } from 'react';\n\nimport s from './Map.styled';\n\nexport default class Map extends Component {\n  constructor(props) {\n    super(props);\n    this.mapRef = React.createRef();\n    this.map = null;\n  }\n\n  componentDidMount() {\n    const {\n      google: {\n        maps: {\n          places: { PlacesService },\n          Map: GoogleMap\n        }\n      }\n    } = window;\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(({ coords: { latitude: lat, longitude: lng } }) => {\n        this.map = new GoogleMap(this.mapRef.current, {\n          center: { lat, lng },\n          zoom: 8\n        });\n\n        const places = new PlacesService(this.map);\n        places.nearbySearch(\n          {\n            location: {\n              lat,\n              lng\n            },\n            type: 'restaurant',\n            radius: 7000\n          },\n          restaurants => {\n            // eslint-disable-next-line no-console\n            console.log(restaurants);\n          }\n        );\n      });\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <s.MapContainer ref={this.mapRef} />\n      </>\n    );\n  }\n}\n","import React from 'react';\n\nimport ReactDOM from 'react-dom';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './components/App';\nimport GlobalStyle from './components/GlobalStyle.styled';\nimport Map from './components/Map';\n\nReactDOM.render(\n  <>\n    <GlobalStyle />\n    <App leftSide={<Map />} rightSide={<span>Hello</span>} />\n  </>,\n  document.getElementById('app-render')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls. More documentation.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}